module regfile(
    output [63:0] read_data1, 
    output [63:0] read_data2,
    input [63:0] write_data, 
    input [4:0] read_reg1,
    input [4:0] read_reg2,
    input [4:0] write_reg,
    input reg_write, 
    input clk
);

    wire [31:0] write_enable;
    wire [31:0][63:0] registers;
    
    // Decoder
    decoder_5_32 dec(.sel(write_reg), .out(write_enable));

    // 32 Registers of 64 bits
    genvar i;
    generate
        for(i = 0; i < 32; i=i+1) begin : regs_loop // named block here
            if(i == 31) 
                assign registers[i] = 64'b0;  // For ARM, R31 is hardwired to 0
            else
                register_64bit reg_instance(.d(write_data), .en(write_enable[i]), .reset(1'b0), .clk(clk), .q(registers[i]));  // reset set to constant 0
        end
    endgenerate
    
    // 2 Multiplexors for read
    mux_32_1 mux1(.inputs(registers), .sel(read_reg1), .out(read_data1));
    mux_32_1 mux2(.inputs(registers), .sel(read_reg2), .out(read_data2));
    
endmodule

